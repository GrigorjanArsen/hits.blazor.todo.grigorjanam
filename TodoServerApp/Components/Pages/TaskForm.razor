@page "/tasks/add"
@page "/tasks/{id:int}"

@inject IDataService data;
@inject NavigationManager navigate;

@if (TaskItem != null)
{
    <EditForm Model="TaskItem" FormName="TaskForm" OnValidSubmit="ValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h2>Новая задача</h2>
        <InputNumber @bind-Value="TaskItem.Id" hidden />
        <div class="form-group d-flex justify-content-betwwen m-2">
            <label class="col-form-label col-3">Заголовок</label>
            <InputText @bind-Value="TaskItem.Title" class="form-control" />
            <ValidationMessage For="() => TaskItem.Title" />
        </div>
        <div class="form-group d-flex justify-content-betwwen m-2">
            <label class="col-form-label col-3">Описание</label>
            <InputText @bind-Value="TaskItem.Description" class="form-control" />
            <ValidationMessage For="() => TaskItem.Description" />
        </div>
        <div class="form-group d-flex justify-content-betwwen m-2">
            <label class="col-form-label col-3">Дата окончания</label>
            <InputDate @bind-Value="TaskItem.FinishDate" class="form-control" />
            <ValidationMessage For="() => TaskItem.FinishDate" />
        </div>
        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Проект</label>
            <InputSelect @bind-Value="TaskItem.ProjId" class="form-control">
                <option value="">Выберите проект</option>
                @foreach (var project in projects)
                {
                    <option value="@project.Id">@project.Title</option>
                }
            </InputSelect>
            <ValidationMessage For="() => TaskItem.ProjId" />
        </div>
        <div class="btn-group">
            <button class="btn btn-primary m-2" type="submit">Сохранить</button>
            <a class="btn btn-primary m-2" href="/">Отмена</a>
        </div>
    </EditForm>
}


@code
{
    [Parameter]
    public int Id { get; set; }
    IEnumerable<ProjectItem> projects = new List<ProjectItem>();

    [SupplyParameterFromForm]
    TaskItem? TaskItem { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        projects = await data.GetAllProjectsAsync();

        if (TaskItem == null)
        {
            TaskItem = new();
            if (Id != 0)
            {
                var task = await data.GetTaskAsync(Id);
                if (task != null)
                {
                    TaskItem.Id = task.Id;
                    TaskItem.Title = task.Title;
                    TaskItem.Description = task.Description;
                    TaskItem.FinishDate = task.FinishDate;
                    TaskItem.ProjId = task.ProjId;
                }
            }
        }
       
    }

    async Task ValidSubmit()
    {
        await data.SaveAsync(TaskItem!);
        navigate.NavigateTo("/");
    }
}